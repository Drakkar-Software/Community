name: Community - Docker
on: [ push ]

jobs:
  lint:
    name: ubuntu-latest - Docker - lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Run hadolint
        uses: reviewdog/action-hadolint@v1
        with:
          github_token: ${{ secrets.github_token }}
          hadolint_ignore: DL3013 DL3008

  build_and_push_staging:
    needs:
      - lint
    name: ubuntu-latest - Docker - build and push - Staging
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - uses: actions/checkout@v2

      - name: Set Environment Variables
        run: |
          OWNER=${{ secrets.DOCKER_REGISTRY }}
          IMG=community
          echo "VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "IMAGE=${OWNER}/${IMG}" >> $GITHUB_ENV
          echo "LATEST=latest-${SUFFIX}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: nologin
          password: ${{ secrets.SCALEWAY_API_SECRET }}

      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile.production
          platforms: linux/amd64
          push: false
          tags: ${{ env.IMAGE }}:${{ env.LATEST }}
          build-args: |
            GITHUB_TOKEN=${{ secrets.AUTH_TOKEN }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build and push latest
        if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags') && github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile.production
          platforms: linux/amd64
          push: true
          tags: ${{ env.IMAGE }}:${{ env.LATEST }}
          build-args: |
            GITHUB_TOKEN=${{ secrets.AUTH_TOKEN }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.build_and_push.outputs.digest }}

  build_and_push_production:
    needs:
      - lint
      - build_and_push_staging
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    name: ubuntu-latest - Docker - build and push - Production
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v2

      - name: Set Environment Variables
        run: |
          OWNER=${{ secrets.DOCKER_REGISTRY }}
          IMG=community
          echo "VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "IMAGE=${OWNER}/${IMG}" >> $GITHUB_ENV
          echo "LATEST=latest-${SUFFIX}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: nologin
          password: ${{ secrets.SCALEWAY_API_SECRET }}

      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile.production
          platforms: linux/amd64
          push: false
          tags: ${{ env.IMAGE }}:${{ env.LATEST }}
          build-args: |
            GITHUB_TOKEN=${{ secrets.AUTH_TOKEN }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build and push on tag
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile.production
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE }}:${{ env.LATEST }}
            ${{ env.IMAGE }}:${{ env.VERSION }}
          build-args: |
            GITHUB_TOKEN=${{ secrets.AUTH_TOKEN }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.build_and_push.outputs.digest }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs:
      - lint
      - build_and_push_staging
      - build_and_push_production
    if: ${{ failure() }}

    steps:
      - name: Notify discord
        uses: sarisia/actions-status-discord@v1
        with:
          status: Failure
          webhook: ${{ secrets.DISCORD_GITHUB_WEBHOOK }}
